// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: stocks.proto

package goprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegisteringTransaction_GetFund_FullMethodName           = "/RegisteringTransaction/GetFund"
	RegisteringTransaction_GetShareQty_FullMethodName       = "/RegisteringTransaction/GetShareQty"
	RegisteringTransaction_Buy_FullMethodName               = "/RegisteringTransaction/Buy"
	RegisteringTransaction_Sell_FullMethodName              = "/RegisteringTransaction/Sell"
	RegisteringTransaction_GetShareLivePrice_FullMethodName = "/RegisteringTransaction/GetShareLivePrice"
)

// RegisteringTransactionClient is the client API for RegisteringTransaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisteringTransactionClient interface {
	GetFund(ctx context.Context, in *DbID, opts ...grpc.CallOption) (*FundResponse, error)
	GetShareQty(ctx context.Context, in *ShareQuery, opts ...grpc.CallOption) (*ShareQtyResponse, error)
	Buy(ctx context.Context, in *NotingTransaction, opts ...grpc.CallOption) (*Message, error)
	Sell(ctx context.Context, in *NotingTransaction, opts ...grpc.CallOption) (*Message, error)
	GetShareLivePrice(ctx context.Context, in *ShareSymbol, opts ...grpc.CallOption) (*SharePrice, error)
}

type registeringTransactionClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisteringTransactionClient(cc grpc.ClientConnInterface) RegisteringTransactionClient {
	return &registeringTransactionClient{cc}
}

func (c *registeringTransactionClient) GetFund(ctx context.Context, in *DbID, opts ...grpc.CallOption) (*FundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundResponse)
	err := c.cc.Invoke(ctx, RegisteringTransaction_GetFund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeringTransactionClient) GetShareQty(ctx context.Context, in *ShareQuery, opts ...grpc.CallOption) (*ShareQtyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareQtyResponse)
	err := c.cc.Invoke(ctx, RegisteringTransaction_GetShareQty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeringTransactionClient) Buy(ctx context.Context, in *NotingTransaction, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, RegisteringTransaction_Buy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeringTransactionClient) Sell(ctx context.Context, in *NotingTransaction, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, RegisteringTransaction_Sell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registeringTransactionClient) GetShareLivePrice(ctx context.Context, in *ShareSymbol, opts ...grpc.CallOption) (*SharePrice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SharePrice)
	err := c.cc.Invoke(ctx, RegisteringTransaction_GetShareLivePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisteringTransactionServer is the server API for RegisteringTransaction service.
// All implementations must embed UnimplementedRegisteringTransactionServer
// for forward compatibility.
type RegisteringTransactionServer interface {
	GetFund(context.Context, *DbID) (*FundResponse, error)
	GetShareQty(context.Context, *ShareQuery) (*ShareQtyResponse, error)
	Buy(context.Context, *NotingTransaction) (*Message, error)
	Sell(context.Context, *NotingTransaction) (*Message, error)
	GetShareLivePrice(context.Context, *ShareSymbol) (*SharePrice, error)
	mustEmbedUnimplementedRegisteringTransactionServer()
}

// UnimplementedRegisteringTransactionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegisteringTransactionServer struct{}

func (UnimplementedRegisteringTransactionServer) GetFund(context.Context, *DbID) (*FundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFund not implemented")
}
func (UnimplementedRegisteringTransactionServer) GetShareQty(context.Context, *ShareQuery) (*ShareQtyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareQty not implemented")
}
func (UnimplementedRegisteringTransactionServer) Buy(context.Context, *NotingTransaction) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedRegisteringTransactionServer) Sell(context.Context, *NotingTransaction) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (UnimplementedRegisteringTransactionServer) GetShareLivePrice(context.Context, *ShareSymbol) (*SharePrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareLivePrice not implemented")
}
func (UnimplementedRegisteringTransactionServer) mustEmbedUnimplementedRegisteringTransactionServer() {
}
func (UnimplementedRegisteringTransactionServer) testEmbeddedByValue() {}

// UnsafeRegisteringTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisteringTransactionServer will
// result in compilation errors.
type UnsafeRegisteringTransactionServer interface {
	mustEmbedUnimplementedRegisteringTransactionServer()
}

func RegisterRegisteringTransactionServer(s grpc.ServiceRegistrar, srv RegisteringTransactionServer) {
	// If the following call pancis, it indicates UnimplementedRegisteringTransactionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegisteringTransaction_ServiceDesc, srv)
}

func _RegisteringTransaction_GetFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteringTransactionServer).GetFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteringTransaction_GetFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteringTransactionServer).GetFund(ctx, req.(*DbID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteringTransaction_GetShareQty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteringTransactionServer).GetShareQty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteringTransaction_GetShareQty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteringTransactionServer).GetShareQty(ctx, req.(*ShareQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteringTransaction_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotingTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteringTransactionServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteringTransaction_Buy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteringTransactionServer).Buy(ctx, req.(*NotingTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteringTransaction_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotingTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteringTransactionServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteringTransaction_Sell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteringTransactionServer).Sell(ctx, req.(*NotingTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisteringTransaction_GetShareLivePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisteringTransactionServer).GetShareLivePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisteringTransaction_GetShareLivePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisteringTransactionServer).GetShareLivePrice(ctx, req.(*ShareSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisteringTransaction_ServiceDesc is the grpc.ServiceDesc for RegisteringTransaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisteringTransaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RegisteringTransaction",
	HandlerType: (*RegisteringTransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFund",
			Handler:    _RegisteringTransaction_GetFund_Handler,
		},
		{
			MethodName: "GetShareQty",
			Handler:    _RegisteringTransaction_GetShareQty_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _RegisteringTransaction_Buy_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _RegisteringTransaction_Sell_Handler,
		},
		{
			MethodName: "GetShareLivePrice",
			Handler:    _RegisteringTransaction_GetShareLivePrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks.proto",
}
